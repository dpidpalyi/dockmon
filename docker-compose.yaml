version: "3.9"

networks:
  net:
    ipam:
      driver: default
      config:
        - subnet: "172.16.1.0/24"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    networks:
      net:
        ipv4_address: 172.16.1.2
    ports:
      - "8888:8888"
    depends_on:
      postgres:
        condition: service_healthy

  pinger:
    build:
      context: ./pinger
      dockerfile: Dockerfile
    container_name: pinger
    networks:
      net:
        ipv4_address: 172.16.1.3
    depends_on:
      - backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      net:
        ipv4_address: 172.16.1.4
    depends_on:
      - backend
    ports:
      - "8080:8080"

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      net:
        ipv4_address: 172.16.1.5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  alpine1:
    image: alpine
    container_name: alpine1
    tty: true
    networks:
      net:
        ipv4_address: 172.16.1.6

  alpine2:
    image: alpine
    container_name: alpine2
    tty: true
    networks:
      net:
        ipv4_address: 172.16.1.7

  alpine3:
    image: alpine
    container_name: alpine3
    tty: true
    networks:
      net:
        ipv4_address: 172.16.1.8

  alpine4:
    image: alpine
    container_name: alpine4
    tty: true
    networks:
      net:
        ipv4_address: 172.16.1.9

volumes:
  postgres_data:

